{:name            "SNOrga"
 :secrets         #include #or [#env APP_SECRETS_FILE "../secrets.edn"]
 :admin-email     #ref [:secrets :admin-email]
 :app-base-url    #ref [:secrets :app-base-url]
 :app-secret-key  #ref [:secrets :app-secret-key]
 :session-config  {:cookie-attrs  {:same-site :strict
                                   :http-only true
                                   :path      "/"}
                   :session-ttl-s 1210000 ;; 14 days
                   }
 :oauth2          {:well-known-uri #ref [:secrets :oauth2 :well-known-uri]
                   :client-id      #ref [:secrets :oauth2 :client-id]
                   :client-secret  #ref [:secrets :oauth2 :client-secret]
                   :callback-path  "/oauth2/callback"}
 :authorization   {:known-roles #{:admin :Mitglieder}}
 :environment     #profile {:prod #or [#env APP_ENVIRONMENT "prod"]
                            :dev  "dev"
                            :demo "demo"
                            :test "test"}
 :keycloak        #ref [:secrets :keycloak]
 :discourse       {:api-key   #ref [:secrets :discourse :api-key]
                   :username  #ref [:secrets :discourse :username]
                   :forum-url "https://forum.streetnoise.at"}
 :nextcloud       #ref [:secrets :nextcloud]
 :airtable        {:token                    #ref [:secrets :airtable :token]
                   :base                     #ref [:secrets :airtable :base]
                   :all-people-table         {:name "People" :view "All People"}
                   :gigo-linked-people-table {:name "People" :view "Gigo Linked"}
                   :gigo-table               {:name "Gigo" :view "All"}
                   :instruments-table        {:name "Instruments" :view "All Instruments"}}
 :gigo            {:username #ref [:secrets :gigo :username]
                   :password #ref [:secrets :gigo :password]}
 :twilio          {:bot-number     #ref [:secrets :twilio :bot-number]
                   :twilio-account #ref [:secrets :twilio :twilio-account]
                   :twilio-token   #ref [:secrets :twilio :twilio-token]}
 :mailgun         {;;  test mode hits the mailgun API but mailgun does not send the message.
                   ;;  this still costs money
                   :test-mode?             #ref [:secrets :mailgun :test-mode?]
                   ;; demo mode does not hit the mailgun API.. it just taps the emails instead of sending
                   :demo-mode?             #ref [:secrets :mailgun :demo-mode?]
                   :test-mode-disabled-for #ref [:secrets :mailgun :test-mode-disabled-for]
                   :api-key                #ref [:secrets :mailgun :api-key]
                   :from                   #ref [:secrets :mailgun :from]
                   :send-domain            #ref [:secrets :mailgun :send-domain]
                   :mailgun-domain         #ref [:secrets :mailgun :mailgun-domain]}
 :sentry          {:dsn #ref [:secrets :sentry :dsn]}
 :redis           {:conn-spec #ref [:secrets :redis :conn-spec]}
 :max-header-size 12000
 :ig/system       {:app.ig/profile          #profile {:prod :prod
                                                      :dev  :dev
                                                      :demo :demo
                                                      :test :test}
                   :app.ig/env              {:profile #ig/ref :app.ig/profile}
                   :app.ig/nrepl-server     {:port #long #or [#env NREPL_PORT
                                                              #profile {:prod 7000
                                                                        :dev -1
                                                                        :test -1
                                                                        :demo -1}]
                                             :bind #or [#env NREPL_HOST "127.0.0.1"]}
                   :app.ig/pedestal         {:service-map {:io.pedestal.http/type   :jetty
                                                           :io.pedestal.http/routes []
                                                           :io.pedestal.http/port   #long #or [#env HTTP_PORT #profile {:dev 6161 :test 6162} 6160]
                                                           :io.pedestal.http/host   #or [#env HTTP_BIND_HOST "localhost"]
                                        ;:io.pedestal.http/resource-path "/static"
                                                           :io.pedestal.http/join?  false}
                                             :datomic     #ig/ref :app.ig/datomic-db
                                             :env         #ig/ref :app.ig/env
                                             :handler     #ig/ref :app.ig/handler
                                             :i18n-langs  #ig/ref :app.ig/i18n-langs
                                             :keycloak    #ig/ref :app.ig/keycloak
                                             :profile     #ig/ref :app.ig/profile
                                             :redis       #ig/ref :app.ig/redis
                                             :routes      #ig/ref :app.ig.router/routes
                                             :webdav      #ig/ref :app.ig/webdav-sardine}
                   :app.ig/handler          {:env #ig/ref :app.ig/env}
                   :app.ig.router/routes    {:routes     #ig/refset :app.ig/routes
                                             :i18n-langs #ig/ref :app.ig/i18n-langs
                                             :env        #ig/ref :app.ig/env
                                             :oauth2     #ig/ref :app.ig/oauth2
                                             :datomic    #ig/ref :app.ig/datomic-db
                                             :webdav     #ig/ref :app.ig/webdav-sardine
                                             :keycloak   #ig/ref :app.ig/keycloak
                                             :redis      #ig/ref :app.ig/redis}
                   :app.ig/oauth2           {:env #ig/ref :app.ig/env}
                   :ol.ig/jobs              {:job-defs #ig/ref :app.ig.jobs/definitions
                                             :env      #ig/ref :app.ig/env}
                   :app.ig/gigo-client      {:env #ig/ref :app.ig/env}
                   :app.ig/sentry           {:env #ig/ref :app.ig/env}
                   :app.ig/datomic-db       {:server-type :dev-local
                                             :system      "app"
                                             :db-name     "probematic"
                                             :env         #ig/ref :app.ig/env
                                             :storage-dir #or [#env DATOMIC_DB_STORAGE_DIR
                                                               #profile {:dev  #envf ["%s/datomic.data" PWD]
                                                                         :test #envf ["%s/datomic.test.data" PWD]
                                                                         :demo #envf ["%s/datomic.demo.data" PWD]}]}
                   :app.ig/i18n-langs       {}
                   :app.ig/mailgun          {:env #ig/ref :app.ig/env}
                   :app.ig/redis            {:env #ig/ref :app.ig/env}
                   :app.ig/email-worker     {:env     #ig/ref :app.ig/env
                                             :redis   #ig/ref :app.ig/redis
                                             :mailgun #ig/ref :app.ig/mailgun}
                   :app.ig/webdav-sardine   {:env #ig/ref :app.ig/env}
                   :app.ig/keycloak         {:env #ig/ref :app.ig/env}
                   :app.ig.jobs/definitions {:env        #ig/ref :app.ig/env
                                             :gigo       #ig/ref :app.ig/gigo-client
                                             :datomic    #ig/ref :app.ig/datomic-db
                                             :i18n-langs #ig/ref :app.ig/i18n-langs
                                             :redis      #ig/ref :app.ig/redis}}
 :jobs            {:job/sync-gigs          {:job/frequency     [60 :minutes]
                                            :job/initial-delay [2 :seconds]}
                   :job/sync-members       {:job/frequency     [8 :hours]
                                            :job/initial-delay [3 :seconds]}
                   :job/update-airtable    {:job/frequency     [1 :hours]
                                            :job/initial-delay [2 :seconds]}
                   :job/probe-housekeeping {:job/frequency     [1 :hours]
                                            :job/initial-delay [2 :seconds]}
                   :job/reminders          {:job/frequency     [1 :hours]
                                            :job/initial-delay [2 :seconds]}}}
